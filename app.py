from flask import Flask, request, jsonify, render_template
from transformers import pipeline
import torch
import torchaudio
from pydub import AudioSegment
import os
import io
os.environ["HF_HUB_DISABLE_SYMLINKS_WARNING"] = "1"
from transformers import AutoModelForAudioClassification, AutoFeatureExtractor



app = Flask(__name__)

# –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —ç–º–æ—Ü–∏–π —Å surprise
emotion_map = {
    'joy': 'üòä –†–∞–¥–æ—Å—Ç—å',
    'neutral': 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ',
    'anger': 'üò† –ó–ª–æ—Å—Ç—å',
    'sadness': 'üò¢ –ì—Ä—É—Å—Ç—å',
    'surprise': 'üò≤ –£–¥–∏–≤–ª–µ–Ω–∏–µ'
}

# –î–æ–±–∞–≤–∏–º ffmpeg –∏ ffprobe –≤ PATH
os.environ["PATH"] = r"C:\ffmpeg\bin;" + os.environ["PATH"]

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
text_classifier = pipeline("text-classification", model="cointegrated/rubert-tiny2-cedr-emotion-detection", top_k=None)

# –ú–æ–¥–µ–ª—å –¥–ª—è –∞—É–¥–∏–æ
# –ê—É–¥–∏–æ –º–æ–¥–µ–ª—å: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä—É—Å—Å–∫–æ–≥–æ
audio_classifier = pipeline(
    "audio-classification",
    model="superb/hubert-large-superb-er",
    device=0 if torch.cuda.is_available() else -1
)


@app.route("/")
def index():
    return render_template("index.html")

@app.route("/analyze", methods=["POST"])
def analyze_text():
    data = request.get_json()
    text = data.get("text", "")
    if not text.strip():
        return jsonify({"error": "–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç."}), 400

    predictions = text_classifier(text)[0]
    if not predictions:
        return jsonify({"emotion": "‚ùì –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ", "confidence": 0.0})

    top_prediction = max(predictions, key=lambda x: x["score"])
    label = top_prediction["label"]
    confidence = round(top_prediction["score"], 2)

    if confidence < 0.5:
        return jsonify({"emotion": "ü§î –ù–µ—É–≤–µ—Ä–µ–Ω–Ω–æ", "confidence": confidence})

    emotion = emotion_map.get(label, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    return jsonify({"emotion": emotion, "confidence": confidence})

from pydub.utils import which

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ffmpeg
if not which("ffmpeg"):
    print("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")


@app.route('/analyze_audio', methods=['POST'])
def analyze_audio():
    try:
        if 'audio' not in request.files:
            return jsonify({'error': '–ê—É–¥–∏–æ —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

        audio_file = request.files['audio']
        temp_path = "temp_audio.wav"

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
        audio = AudioSegment.from_file(io.BytesIO(audio_file.read()))
        audio = audio.set_frame_rate(16000).set_channels(1)
        audio.export(temp_path, format="wav", codec="pcm_s16le")  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–µ–∫

        # –ê–Ω–∞–ª–∏–∑
        result = audio_classifier(temp_path)
        os.remove(temp_path)

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print("Raw model output:", result)

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —ç–º–æ—Ü–∏—è–º–∏
        # –ù–æ–≤—ã–π –º–∞–ø–ø–∏–Ω–≥
        emotion_mapping = {
            'hap': 'happy',
            'sad': 'sad',
            'neu': 'neutral',
            'ang': 'angry'
        }

        # –°–±–æ—Ä —ç–º–æ—Ü–∏–π
        emotions = {v: 0.0 for v in emotion_mapping.values()}

        for item in result:
            label = item['label'].lower()
            score = item['score']
            if label in emotion_mapping:
                key = emotion_mapping[label]
                emotions[key] += score

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        total = sum(emotions.values())
        if total == 0:
            return jsonify({'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —ç–º–æ—Ü–∏–∏'}), 500

        emotions = {k: round(v / total, 4) for k, v in emotions.items()}
        dominant_emotion = max(emotions.items(), key=lambda x: x[1])

        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        response_map = {
            'happy': 'üòä –†–∞–¥–æ—Å—Ç—å',
            'sad': 'üò¢ –ì—Ä—É—Å—Ç—å',
            'angry': 'üò† –ó–ª–æ—Å—Ç—å',
            'neutral': 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ'
        }

        return jsonify({
            'emotion': response_map.get(dominant_emotion[0], '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'confidence': dominant_emotion[1],
            'details': emotions
        })

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏–æ: {str(e)}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ'}), 500


if __name__ == "__main__":
    app.run(debug=True)

if __name__ == "__main__":
    app.run(debug=True)
